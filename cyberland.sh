#!/bin/bash

GREEN="\e[92m"
LIGHT_GREEN="\e[1;32m"
RED="\e[31m"
LIGHT_RED="\e[1;31m"
YELLOW="\e[93m"
BLUE="\e[1;34m"
CYAN="\e[96m"
MAGENTA="\e[1;35m"
RESET="\e[0m"

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}‚ùå Este script debe ejecutarse como root o con sudo.${RESET}" 
   exit 1
fi

comprobar_requisitos() {
    clear
    echo -e "${GREEN}==========================================${RESET}"
    echo -e "${LIGHT_RED}      üîç Comprobar Requisitos üîç${RESET}"
    echo -e "${GREEN}==========================================${RESET}"
    echo
    if ! command -v docker &> /dev/null
    then
        echo -e "${RED}‚ùå Docker no est√° instalado.${RESET}"
        echo -e "Por favor, instala Docker y vuelve a intentarlo."
        echo -e "${YELLOW}Puedes descargarlo desde: https://docs.docker.com/get-docker/${RESET}"
    else
        echo -e "${GREEN}‚úÖ Docker est√° instalado.${RESET}"
        docker --version
    fi
    echo
    read -p "Presione Enter para regresar al men√∫ principal..."
}

iniciar_perfil_jugador() {
    clear
    echo -e "${LIGHT_GREEN}üïπÔ∏è Cargando el Perfil Jugador...${RESET}"
    menu_jugador
}

iniciar_perfil_creador() {
    clear
    echo -e "${LIGHT_GREEN}üõ†Ô∏è Cargando el Perfil Creador...${RESET}"
    menu_creador
}

salir_script() {
    echo -e "${LIGHT_RED}üëã Saliendo del script...${RESET}"
    exit 0
}

mostrar_creditos() {
    clear
    echo -e "\e[1;35m==========================================\e[0m"
    echo -e "\e[1;35m                Cr√©ditos                  \e[0m"
    echo -e "\e[1;35m==========================================\e[0m"
    echo
    echo -e "\e[1;33m‚ú® Desarrollador:\e[0m"
    echo -e "\e[93mVersi√≥n: 1.0\e[0m"
    echo -e "\e[93mAutor: 4k4m1m3\e[0m"
    echo -e "\e[93mWeb: 4k4m1m3.com\e[0m"
    echo -e "\e[96mLinkedIn: https://www.linkedin.com/in/4k4m1m3/\e[0m"
    echo
    echo -e "\e[1;33müë®‚Äçüíº CEO de CyberLand Labs:\e[0m"
    echo -e "\e[93mAdri√°n Gisbert\e[0m"
    echo -e "\e[96mDesarrollo, programaci√≥n y mejora de la web\e[0m"
    echo -e "\e[96mWeb: https://cyberlandsec.com\e[0m"
    echo -e "\e[96mLinkedIn: https://www.linkedin.com/in/sr-gisbert/\e[0m"
    echo
    echo -e "\e[1;33müõ†Ô∏è Creador Principal de M√°quinas:\e[0m"
    echo -e "\e[93mSantiago Guevara\e[0m"
    echo -e "\e[96mAdministraci√≥n, creaci√≥n y desarrollo de nuevas m√°quinas CTFs\e[0m"
    echo -e "\e[96mLinkedIn: https://www.linkedin.com/in/santiagoguevara-/\e[0m"
    echo
    echo -e "\e[1;35m==========================================\e[0m"
    echo
    read -p "Presione Enter para regresar al men√∫ principal..."
}

menu_principal() {
    while true; do
        clear
        echo -e "${GREEN}==========================================${RESET}"
        echo -e "${LIGHT_GREEN}       ü¶æ Bienvenidos a Cyberland Labs ü¶æ${RESET}"
        echo -e "${GREEN}==========================================${RESET}"
        echo
        echo -e "${CYAN}Este script te permite administrar, crear, exportar y eliminar im√°genes y contenedores Docker.${RESET}"
        echo -e "${CYAN}Podr√°s crear y configurar nuevas m√°quinas para CTFs, exportarlas y, si lo deseas, jugar en ellas.${RESET}"
        echo
        echo -e "${MAGENTA}üîπ Existen cinco opciones disponibles: ${RESET}"
        echo -e "${GREEN}1)${RESET} Perfil Jugador    - Descargar, ejecutar y resolver desaf√≠os en las m√°quinas CTF ya configuradas."
        echo -e "${GREEN}2)${RESET} Perfil Creador    - Crear, configurar y exportar nuevas m√°quinas CTF."
        echo -e "${GREEN}3)${RESET} Comprobar Requisitos"
        echo -e "${GREEN}4)${RESET} Cr√©ditos"
        echo -e "${GREEN}5)${RESET} Salir del script"
        echo
        echo -e "${BLUE}üåê Web principal:${RESET} ${LIGHT_GREEN}cyberlandsec.com${RESET}"
        echo
        echo -e "${GREEN}==========================================${RESET}"
        echo
        echo -e "${CYAN}Ingrese el n√∫mero correspondiente a la opci√≥n deseada:${RESET}"
        echo -e "${GREEN}1)${RESET} Perfil Jugador"
        echo -e "${GREEN}2)${RESET} Perfil Creador"
        echo -e "${GREEN}3)${RESET} Comprobar Requisitos"
        echo -e "${GREEN}4)${RESET} Cr√©ditos"
        echo -e "${GREEN}5)${RESET} Salir"
        echo
        read -p "Opci√≥n: " opcion
        case $opcion in
            1)
                iniciar_perfil_jugador
                ;;
            2)
                iniciar_perfil_creador
                ;;
            3)
                comprobar_requisitos
                ;;
            4)
                mostrar_creditos
                ;;
            5)
                salir_script
                ;;
            *)
                echo -e "${LIGHT_RED}‚ùå Opci√≥n inv√°lida. Por favor, ingrese un n√∫mero entre 1 y 5.${RESET}"
                sleep 2
                ;;
        esac
    done
}

menu_jugador() {
    while true; do
        clear
        echo -e "${GREEN}==========================================${RESET}"
        echo -e "${LIGHT_GREEN}      üéÆ Men√∫ del Perfil Jugador üéÆ${RESET}"
        echo -e "${GREEN}==========================================${RESET}"
        echo
        echo -e "${CYAN}1) Importar m√°quina CTF desde archivo local${RESET}"
        echo -e "${CYAN}2) Listar im√°genes Docker existentes${RESET}"
        echo -e "${CYAN}3) Eliminar imagen Docker existente${RESET}"
        echo -e "${CYAN}4) Iniciar m√°quina exportada${RESET}"
        echo -e "${CYAN}5) Regresar al men√∫ principal${RESET}"
        echo -e "${CYAN}6) Salir del script${RESET}"
        echo
        read -p "Seleccione una opci√≥n: " opcion
        if [[ -z "$opcion" || ! "$opcion" =~ ^[1-6]$ ]]; then
            echo "‚ùå Opci√≥n inv√°lida. Por favor ingrese un n√∫mero entre 1 y 6."
            read -p "Presione Enter para continuar..." dummy
            continue
        fi
        case $opcion in
            1) importar_maquina ;;
            2) listar_imagenes_existentes ;;
            3) eliminar_imagen ;;
            4) iniciar_maquina_exportada ;;
            5) break ;;
            6) salir_script ;;
        esac
    done
}

importar_maquina() {
    clear
    echo "=========================================="
    echo -e "    üìÇ Importar m√°quina CTF desde archivo üìÇ"
    echo "=========================================="
    read -p "Ingrese la ruta del archivo de la m√°quina (ejemplo: /ruta/a/mi_archivo.tar): " archivo_maquina
    if [ ! -f "$archivo_maquina" ]; then
        echo "‚ùå El archivo no existe. Intente nuevamente."
        read -p "Presione Enter para regresar al men√∫..."
        return
    fi
    echo "Importando la m√°quina desde '$archivo_maquina'..."
    docker load -i "$archivo_maquina"
    if [ $? -eq 0 ]; then
        echo "üéâ La m√°quina ha sido importada exitosamente."
    else
        echo "‚ùå Ocurri√≥ un error al importar la m√°quina."
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

listar_imagenes_existentes() {
    clear
    echo "=========================================="
    echo -e "    üìã Im√°genes Docker Existentes üìã"
    echo "=========================================="
    docker images
    read -p "Presione Enter para regresar al men√∫..."
}

eliminar_imagen() {
    clear
    echo "=========================================="
    echo -e "    üóëÔ∏è Eliminar Imagen Docker üóëÔ∏è"
    echo "=========================================="
    docker images
    read -p "Ingrese el nombre de la imagen que desea eliminar (nombre:tag, ej: debian:latest): " nombre_imagen
    if [ -z "$nombre_imagen" ]; then
        echo "‚ùå No ha ingresado un nombre de imagen. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    contenedores_que_usan_imagen=$(docker ps -a -q -f "ancestor=$nombre_imagen")
    if [ -n "$contenedores_que_usan_imagen" ]; then
        echo "‚ö†Ô∏è Hay contenedores usando la imagen '$nombre_imagen'. Deteni√©ndolos y elimin√°ndolos..."
        docker stop $contenedores_que_usan_imagen
        docker rm $contenedores_que_usan_imagen
        if [ $? -ne 0 ]; then
            echo "‚ùå Ocurri√≥ un error al detener o eliminar los contenedores."
            read -p "Presione Enter para regresar al men√∫..."
            return
        fi
    fi
    docker rmi "$nombre_imagen"
    if [ $? -eq 0 ]; then
        echo "üéâ La imagen '$nombre_imagen' ha sido eliminada correctamente."
    else
        echo "‚ùå Ocurri√≥ un error al eliminar la imagen."
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

iniciar_maquina_exportada() {
    clear
    echo "=========================================="
    echo -e "    üöÄ Iniciar m√°quina exportada üöÄ"
    echo "=========================================="
    docker images
    read -p "Ingrese el nombre de la m√°quina que desea iniciar (nombre:tag, ej: debian:latest): " nombre_maquina
    if [ -z "$nombre_maquina" ]; then
        echo "‚ùå No ha ingresado el nombre de la m√°quina. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    contenedor_nombre="${nombre_maquina//:/_}_container"
    contenedor_existente=$(docker ps -a -q -f "name=$contenedor_nombre")
    if [ -n "$contenedor_existente" ]; then
        echo "‚ö†Ô∏è El contenedor '$contenedor_nombre' ya existe. Deteni√©ndolo y elimin√°ndolo..."
        docker stop "$contenedor_nombre"
        docker rm "$contenedor_nombre"
        if [ $? -ne 0 ]; then
            echo "‚ùå Ocurri√≥ un error al detener o eliminar el contenedor."
            read -p "Presione Enter para regresar al men√∫..."
            return
        fi
    fi
    echo "Iniciando el contenedor '$nombre_maquina'..."
    docker run -d --name "$contenedor_nombre" "$nombre_maquina" tail -f /dev/null
    container_status=$(docker ps -q -f "name=$contenedor_nombre")
    if [ -z "$container_status" ]; then
        echo "‚ùå El contenedor no se est√° ejecutando. Esto podr√≠a ser por un error en el contenedor."
        sleep 2
        docker logs "$contenedor_nombre" 2>&1 | tee logs.txt
        echo "Los logs del contenedor est√°n guardados en 'logs.txt'."
        read -p "Presione Enter para regresar al men√∫..."
        return
    fi
    container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$contenedor_nombre")
    if [ -z "$container_ip" ]; then
        echo "‚ùå No se pudo obtener la direcci√≥n IP del contenedor."
    else
        echo
        echo "=========================================="
        echo -e "\e[1;36müîå La direcci√≥n IP de la m√°quina es: $container_ip\e[0m"
        echo "=========================================="
        echo
        echo -e "\e[1;34m‚û°Ô∏è Ahora puedes realizar pruebas de conexi√≥n con \`ping\`, usar \`nmap\` para identificar puertos y servicios, y comenzar tu CTF.\e[0m"
        echo
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

conectar_contenedor() {
    clear
    echo "=========================================="
    echo -e "    üîß Conectar a un Contenedor Docker üîß"
    echo "=========================================="
    docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
    read -p "Ingrese el CONTAINER ID del contenedor que desea modificar: " container_id
    if [ -z "$container_id" ]; then
        echo "‚ùå No ha ingresado un CONTAINER ID. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    container_exists=$(docker ps -a -q -f "id=$container_id")
    if [ -z "$container_exists" ]; then
        echo "‚ùå El contenedor con ID '$container_id' no existe. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    container_status=$(docker inspect --format '{{.State.Status}}' "$container_id")
    if [ "$container_status" != "running" ]; then
        echo "‚ùå El contenedor con ID '$container_id' no est√° en ejecuci√≥n."
        read -p "¬øDesea iniciar el contenedor? (s/n): " iniciar_cont
        if [[ "$iniciar_cont" =~ ^[sS]$ ]]; then
            docker start "$container_id"
            if [ $? -ne 0 ]; then
                echo "‚ùå Ocurri√≥ un error al iniciar el contenedor."
                read -p "Presione Enter para regresar al men√∫..."
                return
            fi
            echo "üöÄ Contenedor '$container_id' iniciado correctamente."
        else
            echo "‚ùå No se inici√≥ el contenedor. Regresando al men√∫..."
            read -p "Presione Enter para continuar..." dummy
            return
        fi
    fi
    echo "Conectando al contenedor '$container_id'..."
    docker exec -it "$container_id" bash
    read -p "¬øDesea guardar los cambios realizados en una nueva imagen? (s/n): " guardar_cambios
    if [[ "$guardar_cambios" =~ ^[sS]$ ]]; then
        read -p "Ingrese el nombre para la nueva imagen (ej: cyber:latest): " nueva_imagen
        if [ -n "$nueva_imagen" ]; then
            docker commit "$container_id" "$nueva_imagen"
            if [ $? -eq 0 ]; then
                echo "üéâ Los cambios se han guardado en la nueva imagen '$nueva_imagen'."
            else
                echo "‚ùå Ocurri√≥ un error al guardar la nueva imagen."
            fi
        else
            echo "‚ùå No se proporcion√≥ un nombre para la nueva imagen. No se guardaron los cambios."
        fi
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

menu_creador() {
    while true; do
        clear
        echo -e "${GREEN}==========================================${RESET}"
        echo -e "${LIGHT_GREEN}      üîß Men√∫ del Perfil Creador üîß${RESET}"
        echo -e "${GREEN}==========================================${RESET}"
        echo
        echo -e "${CYAN}1) Crear nueva m√°quina${RESET}"
        echo -e "${CYAN}2) Administrar im√°genes Docker${RESET}"
        echo -e "${CYAN}3) Administrar contenedores Docker${RESET}"
        echo -e "${CYAN}4) Regresar al men√∫ principal${RESET}"
        echo -e "${CYAN}5) Salir del script${RESET}"
        echo
        read -p "Seleccione una opci√≥n: " opcion
        if [[ -z "$opcion" || ! "$opcion" =~ ^[1-5]$ ]]; then
            echo "‚ùå Opci√≥n inv√°lida. Por favor ingrese un n√∫mero entre 1 y 5."
            read -p "Presione Enter para continuar..." dummy
            continue
        fi
        case $opcion in
            1) crear_maquina ;;
            2) administrar_imagenes ;;
            3) administrar_contenedores ;;
            4) break ;;
            5) salir_script ;;
        esac
    done
}

crear_maquina() {
    local HIDDEN_MARKER="TcOhcXVpbmEgZ2VuZXJhZGEgY29uIGN5YmVybGFuZC5zaCBzY3JpcHQgZGVzYXJyb2xsYWRvIHBvciA0azRtMW0zLiDCgUdyYWNpYXMgcG9yIGVsZWdpciBDeWJlckxhbmQgTGFicyEgVmlzaXRhOiBodHRwczovL2N5YmVybGFuZHNlYy5jb20="

    clear
    echo "=========================================="
    echo -e "    üõ†Ô∏è Crear una nueva m√°quina CTF üõ†Ô∏è${RESET}"
    echo "=========================================="
    read -p "Ingrese el nombre de la nueva m√°quina (en min√∫scula sin espacios): " nombre_maquina
    read -p "Ingrese la imagen base (Ej: ubuntu:20.04): " imagen_base
    read -p "Ingrese los puertos a exponer (Ej: 22,80): " puertos
    read -p "Ingrese el contenido de la flag user.txt: " flag_user
    read -p "Ingrese el contenido de la flag root.txt: " flag_root
    if [ -z "$nombre_maquina" ] || [ -z "$imagen_base" ] || [ -z "$puertos" ] || [ -z "$flag_user" ] || [ -z "$flag_root" ]; then
        echo "‚ùå Todos los campos obligatorios deben ser llenados. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    echo "Creando Dockerfile..."
    cat <<EOF > Dockerfile
FROM $imagen_base

RUN groupadd cyberland && \
    useradd -m -g cyberland cyberland

RUN echo "cyberland:password" | chpasswd && \
    echo "root:password" | chpasswd

RUN echo "$flag_user" > /home/cyberland/user.txt && \
    echo "$flag_root" > /root/root.txt

RUN mkdir /home/cyberland/.cyberland_info && \
    echo "$HIDDEN_MARKER" | base64 --decode > /home/cyberland/.cyberland_info/.cyberland_info.txt && \
    chown cyberland:cyberland /home/cyberland/.cyberland_info/.cyberland_info.txt && \
    chmod 600 /home/cyberland/.cyberland_info/.cyberland_info.txt

RUN echo "$(echo "$HIDDEN_MARKER" | base64 --decode)" >> /etc/motd

RUN apt-get update && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

USER cyberland
WORKDIR /home/cyberland

# Exponer los puertos individualmente
EOF

IFS=',' read -ra PUERTOS_ARRAY <<< "$puertos"
for puerto in "${PUERTOS_ARRAY[@]}"; do
    echo "EXPOSE $puerto" >> Dockerfile
done

cat <<EOF >> Dockerfile

CMD ["bash"]
EOF

    echo "Construyendo la imagen Docker..."
    docker build -t "$nombre_maquina" .
    if [ $? -ne 0 ]; then
        echo "‚ùå Error al construir la imagen Docker. Verifica el Dockerfile y los par√°metros ingresados."
        rm -f Dockerfile
        read -p "Presione Enter para regresar al men√∫..."
        return
    fi
    rm -f Dockerfile
    echo "üöÄ M√°quina '$nombre_maquina' creada exitosamente."
    echo
    read -p "¬øDesea iniciar el contenedor para conectarse y configurarlo? (s/n): " iniciar
    if [[ "$iniciar" =~ ^[sS]$ ]]; then
        echo -e "Para finalizar la configuraci√≥n y regresar al men√∫ principal, escriba 'exit' y presione Enter."
        echo -e "\nIniciando contenedor...\n"
        docker run -it --name "${nombre_maquina}_container" "$nombre_maquina" bash
    fi
    read -p "¬øDesea exportar esta m√°quina a formato tar para enviarla? (s/n): " exportar
    if [[ "$exportar" =~ ^[sS]$ ]]; then
        docker save -o "${nombre_maquina}.tar" "$nombre_maquina"
        if [ $? -eq 0 ]; then
            echo "üéâ La imagen ha sido exportada a '${nombre_maquina}.tar'."
        else
            echo "‚ùå Ocurri√≥ un error al exportar la imagen."
        fi
    fi
    echo -e "\n¬øQu√© le gustar√≠a hacer ahora?"
    echo -e "${GREEN}1)${RESET} Regresar al men√∫ principal"
    echo -e "${GREEN}2)${RESET} Salir del script"
    read -p "Seleccione una opci√≥n: " opcion_final
    case $opcion_final in
        1) return ;;
        2) salir_script ;;
        *) echo "‚ùå Opci√≥n inv√°lida. Regresando al men√∫ principal..."; read -p "Presione Enter para continuar..." dummy ;;
    esac
}

administrar_imagenes() {
    while true; do
        clear
        echo "=========================================="
        echo -e "    üìã Administrar Im√°genes Docker üìã"
        echo "=========================================="
        echo -e "${CYAN}1) Listar im√°genes Docker${RESET}"
        echo -e "${CYAN}2) Eliminar imagen Docker${RESET}"
        echo -e "${CYAN}3) Conectar a un contenedor para modificarlo${RESET}"
        echo -e "${CYAN}4) Regresar al men√∫ del perfil Creador${RESET}"
        read -p "Seleccione una opci√≥n: " opcion_imagen
        case $opcion_imagen in
            1) listar_imagenes ;;
            2) eliminar_imagen ;;
            3) conectar_contenedor ;;
            4) break ;;
            *) echo "‚ùå Opci√≥n inv√°lida."; read -p "Presione Enter para continuar..." dummy ;;
        esac
    done
}

listar_imagenes() {
    clear
    echo "=========================================="
    echo -e "    üìã Listar Im√°genes Docker üìã"
    echo "=========================================="
    docker images
    read -p "Presione Enter para regresar al men√∫..."
}

eliminar_imagen() {
    clear
    echo "=========================================="
    echo -e "    üóëÔ∏è Eliminar Imagen Docker üóëÔ∏è"
    echo "=========================================="
    docker images
    read -p "Ingrese el nombre de la imagen que desea eliminar (nombre:tag, ej: debian:latest): " nombre_imagen
    if [ -z "$nombre_imagen" ]; then
        echo "‚ùå No ha ingresado un nombre de imagen. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    contenedores_que_usan_imagen=$(docker ps -a -q -f "ancestor=$nombre_imagen")
    if [ -n "$contenedores_que_usan_imagen" ]; then
        echo "‚ö†Ô∏è Hay contenedores usando la imagen '$nombre_imagen'. Deteni√©ndolos y elimin√°ndolos..."
        docker stop $contenedores_que_usan_imagen
        docker rm $contenedores_que_usan_imagen
        if [ $? -ne 0 ]; then
            echo "‚ùå Ocurri√≥ un error al detener o eliminar los contenedores."
            read -p "Presione Enter para regresar al men√∫..."
            return
        fi
    fi
    docker rmi "$nombre_imagen"
    if [ $? -eq 0 ]; then
        echo "üéâ La imagen '$nombre_imagen' ha sido eliminada correctamente."
    else
        echo "‚ùå Ocurri√≥ un error al eliminar la imagen."
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

administrar_contenedores() {
    while true; do
        clear
        echo "=========================================="
        echo -e "    ‚öôÔ∏è Administrar Contenedores Docker ‚öôÔ∏è"
        echo "=========================================="
        echo -e "${CYAN}1) Listar contenedores Docker${RESET}"
        echo -e "${CYAN}2) Eliminar contenedor Docker${RESET}"
        echo -e "${CYAN}3) Regresar al men√∫ del perfil Creador${RESET}"
        read -p "Seleccione una opci√≥n: " opcion_contenedor
        case $opcion_contenedor in
            1) listar_contenedores ;;
            2) eliminar_contenedor ;;
            3) break ;;
            *) echo "‚ùå Opci√≥n inv√°lida."; read -p "Presione Enter para continuar..." dummy ;;
        esac
    done
}

listar_contenedores() {
    clear
    echo "=========================================="
    echo -e "    üìã Listar Contenedores Docker üìã"
    echo "=========================================="
    docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
    read -p "Presione Enter para regresar al men√∫..."
}

eliminar_contenedor() {
    clear
    echo "=========================================="
    echo -e "    üóëÔ∏è Eliminar Contenedor Docker üóëÔ∏è"
    echo "=========================================="
    docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
    read -p "Ingrese el CONTAINER ID del contenedor que desea eliminar: " contenedor_id
    if [ -z "$contenedor_id" ]; then
        echo "‚ùå No ha ingresado un CONTAINER ID. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    container_exists=$(docker ps -a -q -f "id=$contenedor_id")
    if [ -z "$container_exists" ]; then
        echo "‚ùå El contenedor con ID '$contenedor_id' no existe. Regresando al men√∫..."
        read -p "Presione Enter para continuar..." dummy
        return
    fi
    docker rm -f "$contenedor_id"
    if [ $? -eq 0 ]; then
        echo "üéâ El contenedor '$contenedor_id' ha sido eliminado correctamente."
    else
        echo "‚ùå Ocurri√≥ un error al eliminar el contenedor."
    fi
    read -p "Presione Enter para regresar al men√∫..."
}

menu_jugador() {
    while true; do
        clear
        echo -e "${GREEN}==========================================${RESET}"
        echo -e "${LIGHT_GREEN}      üéÆ Men√∫ del Perfil Jugador üéÆ${RESET}"
        echo -e "${GREEN}==========================================${RESET}"
        echo
        echo -e "${CYAN}1) Importar m√°quina CTF desde archivo local${RESET}"
        echo -e "${CYAN}2) Listar im√°genes Docker existentes${RESET}"
        echo -e "${CYAN}3) Eliminar imagen Docker existente${RESET}"
        echo -e "${CYAN}4) Iniciar m√°quina exportada${RESET}"
        echo -e "${CYAN}5) Regresar al men√∫ principal${RESET}"
        echo -e "${CYAN}6) Salir del script${RESET}"
        echo
        read -p "Seleccione una opci√≥n: " opcion
        if [[ -z "$opcion" || ! "$opcion" =~ ^[1-6]$ ]]; then
            echo "‚ùå Opci√≥n inv√°lida. Por favor ingrese un n√∫mero entre 1 y 6."
            read -p "Presione Enter para continuar..." dummy
            continue
        fi
        case $opcion in
            1) importar_maquina ;;
            2) listar_imagenes_existentes ;;
            3) eliminar_imagen ;;
            4) iniciar_maquina_exportada ;;
            5) break ;;
            6) salir_script ;;
        esac
    done
}

menu_principal
